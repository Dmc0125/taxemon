// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package dbgen

import (
	"context"
	"strings"
)

const fetchDuplicateTimestampsTransactions = `-- name: FetchDuplicateTimestampsTransactions :many
SELECT
    t1.slot,
    t1.signature
FROM
    "transaction" t1
    LEFT JOIN "transaction" t2 ON t2.slot = t1.slot
    AND t2.timestamp = t1.timestamp
    AND t2.signature != t1.signature
WHERE
    t1.block_index IS NULL
    AND t2.block_index IS NULL
    AND t2.id IS NOT NULL
GROUP BY
    t1.slot,
    t1.signature
`

type FetchDuplicateTimestampsTransactionsRow struct {
	Slot      int64  `db:"slot" json:"slot"`
	Signature string `db:"signature" json:"signature"`
}

func (q *Queries) FetchDuplicateTimestampsTransactions(ctx context.Context) ([]*FetchDuplicateTimestampsTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchDuplicateTimestampsTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FetchDuplicateTimestampsTransactionsRow
	for rows.Next() {
		var i FetchDuplicateTimestampsTransactionsRow
		if err := rows.Scan(&i.Slot, &i.Signature); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchTransactions = `-- name: FetchTransactions :many
SELECT
    signature, id, accounts, logs, instructions
FROM
    v_transaction t
WHERE
    t.signature in (/*SLICE:signatures*/?)
`

func (q *Queries) FetchTransactions(ctx context.Context, signatures []string) ([]*VTransaction, error) {
	query := fetchTransactions
	var queryParams []interface{}
	if len(signatures) > 0 {
		for _, v := range signatures {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:signatures*/?", strings.Repeat(",?", len(signatures))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:signatures*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*VTransaction
	for rows.Next() {
		var i VTransaction
		if err := rows.Scan(
			&i.Signature,
			&i.ID,
			&i.Accounts,
			&i.Logs,
			&i.Instructions,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
